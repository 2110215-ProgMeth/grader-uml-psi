name: Build and Release

on:
  workflow_run:
    workflows: ["Code Check"]
    types: ["completed"]
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [21]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build JAR with dependencies
        working-directory: ./core
        run: |
          mvn \
            -Dmaven.compiler.release=${{ matrix.java-version }} \
            -Dmaven.compiler.source=${{ matrix.java-version }} \
            -Dmaven.compiler.target=${{ matrix.java-version }} \
            clean package assembly:single

      - name: Get latest release
        id: get_release
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            try {
              const rel = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              const asset = rel.data.assets.find(a =>
                a.name.endsWith('-jar-with-dependencies.jar')
              );
              return JSON.stringify({
                exists: !!asset,
                url: asset?.browser_download_url,
                tag: rel.data.tag_name
              });
            } catch {
              return JSON.stringify({ exists: false });
            }

      - name: Compare JARs
        id: compare_jars
        run: |
          JAR=core/target/psi-1.0-SNAPSHOT-jar-with-dependencies.jar
          SHA_CUR=$(sha256sum "$JAR" | cut -d' ' -f1)
          echo "Current SHA: $SHA_CUR"
          RELEASE_INFO='${{ steps.get_release.outputs.result }}'
          EXISTS=$(jq -r .exists <<<"$RELEASE_INFO")

          if [ "$EXISTS" = "true" ]; then
            URL=$(jq -r .url <<<"$RELEASE_INFO")
            echo "Fetching previous JAR from $URL"
            wget -qO prev.jar "$URL"
            SHA_PREV=$(sha256sum prev.jar | cut -d' ' -f1)
            echo "Previous SHA: $SHA_PREV"

            if [ "$SHA_CUR" = "$SHA_PREV" ]; then
              echo "jars_differ=false" >> $GITHUB_OUTPUT
              exit 0
            fi

            mkdir cur prev
            (cd cur && jar xf "../$JAR")
            (cd prev && jar xf ../prev.jar)

            if diff -rq cur prev > /dev/null; then
              echo "jars_differ=false" >> $GITHUB_OUTPUT
            else
              echo "jars_differ=true" >> $GITHUB_OUTPUT
              echo "🎯 JAR contents differ:"
              diff -rq cur prev || true
            fi

          else
            echo "No previous release—forcing new version"
            echo "jars_differ=true" >> $GITHUB_OUTPUT
          fi

      - name: Compute next version tag
        id: version
        if: steps.compare_jars.outputs.jars_differ == 'true'
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const tags = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            const semver = tags.data
              .map(t => t.name)
              .filter(n => /^v\d+\.\d+\.\d+$/.test(n))
              .map(n => n.slice(1).split('.').map(Number));
            const highest = semver.length
              ? semver.reduce((a, b) => {
                  for (let i = 0; i < 3; i++) {
                    if (b[i] > a[i]) return b;
                    if (b[i] < a[i]) return a;
                  }
                  return a;
                })
              : [0, 0, 0];
            highest[2] += 1;
            return `v${highest.join('.')}`;

      - name: Create Release
        id: create_release
        if: steps.compare_jars.outputs.jars_differ == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.result }}
          release_name: Release ${{ steps.version.outputs.result }}
          body: |
            Java Structure Extractor - Release ${{ steps.version.outputs.result }}

            ## Usage
            ```bash
            java -jar structure-extractor-psi-${{ steps.version.outputs.result }}.jar [-o output.json] [-t] input.java
            ```

      - name: Upload JAR
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: core/target/psi-1.0-SNAPSHOT-jar-with-dependencies.jar
          asset_name: psi-${{ steps.version.outputs.result }}-jar-with-dependencies.jar
          asset_content_type: application/java-archive

      - name: Final output
        run: |
          if [ "${{ steps.compare_jars.outputs.jars_differ }}" = "true" ]; then
            echo "🚀 Released ${{ steps.version.outputs.result }}"
          else
            echo "⏭️ No release needed"
          fi