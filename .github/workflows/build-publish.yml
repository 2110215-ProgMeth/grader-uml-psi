name: Build and Release

on:
  workflow_run:
    workflows: ["Code Check"]
    types: ["completed"]
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [21]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build JAR with dependencies
        working-directory: ./core
        run: |
          mvn \
            -Dmaven.compiler.release=${{ matrix.java-version }} \
            -Dmaven.compiler.source=${{ matrix.java-version }} \
            -Dmaven.compiler.target=${{ matrix.java-version }} \
            clean package assembly:single

      - name: Get latest release
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const release = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              const asset = release.data.assets.find(a =>
                a.name.includes('structure-extractor-psi-')
              );
              return asset
                ? { exists: true, url: asset.browser_download_url, tag: release.data.tag_name }
                : { exists: false };
            } catch {
              return { exists: false };
            }

      - name: Compare JARs
        id: compare_jars
        run: |
          JAR=core/target/psi-1.0-SNAPSHOT-jar-with-dependencies.jar
          SHA_CUR=$(sha256sum "$JAR" | cut -d' ' -f1)
          echo "Current SHA: $SHA_CUR"
          if [ "${{ fromJSON(steps.get_release.outputs.result).exists }}" = "true" ]; then
            wget -qO prev.jar "${{ fromJSON(steps.get_release.outputs.result).url }}"
            SHA_PREV=$(sha256sum prev.jar | cut -d' ' -f1)
            echo "Previous SHA: $SHA_PREV"
            if [ "$SHA_CUR" = "$SHA_PREV" ]; then
              echo "jars_differ=false" >> $GITHUB_OUTPUT
            else
              mkdir cur prev
              (cd cur && jar xf ../"$JAR")
              (cd prev && jar xf ../prev.jar)
              if diff -rq cur prev > /dev/null; then
                echo "jars_differ=false" >> $GITHUB_OUTPUT
              else
                echo "jars_differ=true" >> $GITHUB_OUTPUT
                diff -rq cur prev || true
              fi
            fi
          else
            echo "jars_differ=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate version
        id: version
        if: steps.compare_jars.outputs.jars_differ == 'true'
        run: |
          if [ "${{ fromJSON(steps.get_release.outputs.result).exists }}" = "true" ]; then
            LAST_TAG=${{ fromJSON(steps.get_release.outputs.result).tag }}
            NEW_VER=$(echo ${LAST_TAG#v} | awk -F. '{print $1"."$2"."($3+1)}')
          else
            NEW_VER="1.0.0"
          fi
          echo "version=v$NEW_VER" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.compare_jars.outputs.jars_differ == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            Java Structure Extractor - Release ${{ steps.version.outputs.version }}

            ## Usage
            ```bash
            java -jar structure-extractor-psi-${{ steps.version.outputs.version }}.jar [-o output.json] [-t] input.java
            ```

            ## Options
            - `-o <file>`: Output JSON file (default: output.json)
            - `-t`: Only include true/non-empty values in output

      - name: Upload JAR
        if: steps.compare_jars.outputs.jars_differ == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: core/target/psi-1.0-SNAPSHOT-jar-with-dependencies.jar
          asset_name: structure-extractor-psi-${{ steps.version.outputs.version }}.jar
          asset_content_type: application/java-archive

      - name: Final output
        run: |
          if [ "${{ steps.compare_jars.outputs.jars_differ }}" = "true" ]; then
            echo "üöÄ Released ${{ steps.version.outputs.version }}"
          else
            echo "‚è≠Ô∏è No release needed"
          fi